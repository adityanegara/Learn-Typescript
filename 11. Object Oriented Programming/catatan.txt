A) Apa itu object oriented programming?
    : Object oriented programming adalah salah satu dari paradigma programming dimana
    object ialah hal yang membangun aplikasi kita.

    A.1) Object
    : Object ialah suatu unit yang memiliki data yang disebut properties. dan operasi yang disebut method.

    A.2) Contoh
    : Object person memiliki properties name, email, dan adderss dan memiliki method talk(), dance(), dan walk()

B) Classes pada typescript
    : Class adalah blueprint untuk membuat objek

    B.1) Contoh
    :  class bank account  memiliki property id, owner, dan balance. Ia juga
    membuat method deposit(), dan withdraw()

    B.2) Constructor
    : Method yang dijalankan pertama kali ketika suatu object dibuat. Biasanya digunakan
    untuk menginisialisasi nilai.

    B.3) Syntax
    class <Nama class dengan Pascal naming>{
        <nama property>: <type property>
        ...
        constructor(){}
        <method>
        ...
    }

C) Membuat Object
    C.1) Syntax
    : <modifier variable> <nama objek> = new <nama class>(<parameter>)

    C.2) Contoh
    : const account = new Account(1, 'Aditya Negara', 0);

    C.3) instanceof
    : Jika ingin mengencek apakah suatu objek ialah hasil class tertentu. Gunakan instanceof

        C.3.1) Syntax
        : <variables> instanceof <class>

        C.3.2) Contoh
        : account instanceof Account

D) Read only and Optional property
    D.1) Read only
    : Bila kau ingin property pada suatu class hanya dapat diinisialisasi pada constructor dan tidak dapat diubah.
    gunakan 'readonly.

    D.2) Optional
    : Bila kau ingin property pada suatu class bersifat opsional. Bisa ada atau tiada gunakan '?'.

    D.3) Contoh
    : class test {
        readonly id: number;
        nickName?: string
        ////
    }

E) Access Control Keyword
    : Dalam typescript kita memiliki modifier untuk mengontrol akses pada properties dan method.

    E.1) Macam-macam access control modifier
        : 1) Public
            : Dapat diakses atau diubah nilainya diluar dari class
          2) Private
            : Hanya dapat diakses atau diubah nilainya didalam  class
          3) Protected
            : Hanya dapat diakses atau diubah  nilainya dalam class atau subclass

    E.2) Syntax
        : <access modifier> <nama variables>/<nama function>;
    
    E.3) Contoh
        : private _balance;

F) Parameter property
    : Terdapat jalan lain dalam menuliskan property pada class. Kita dapat menuliskannya
    dalam parameter constructor

    F.1) Cara biasa
    : class Person {
        public name: string;
        readonly private _id: number;

        constructor(name: string, _id: number){
            this.name = name;
            this._id = _id;
        }
    }

    F.2) Cara Parameter property
    : class Person {
        cosntructor(
            private readonly id:number,
            public name: string,
        )
    }

G) Getter dan Setter
    : Getter ialah method untuk mengambil sebuah value dalam suatu class. Setter ialah method
    untuk mengubah nilai sebuah value dalam sebuah class. Dalam typescript kita dapat menggunakan
    property 'get' dan 'set' pada sebuah method agar method tersebut dapat bertingkah seperti property

    G.1) Syntax
    : get/set <nama method>: <type pengembalian>{}

    G.2) Contoh
    :  class Person {
        cosntructor(
            private readonly _id:number,
            private _name: string,
        )
        get name(): string{
            return this._name;
        }
        set name(value:string){
            this._name = value;
        }
    }

    G.3) Penggunaan
    : const person = new Person(1, 'adit');
      person.name = 'adit edit';
      console.log(person.name);

H) Index Signatures
    H.1) Permasalahan
    : Pada javascript kita dapat membuat objek dan mengassign property setelahnya. Dalam typescript
    hal ini tidak diizinkan karena typescript sangat ketat dengan bentuk objek. Namun bagaimana
    bila kita ingin membuat property secara dynamic? Kita dapat menggunakan index signatures

    H.2) Syntax
    : [<nama property>: <type dari propertynya>] : <type dari valuenya>

    H.3) Contoh
    : class SeatAssignment {
        [seatNumber: string] : string;
    }

    H.4) Penggunaan 
    : const seats = new SeatAssignment();
    seats.A1 = 'Adit';
    seats.A2 = 'Aura';
    seats.A3 = 'Ayesha';

I) Static Members
    : property static mengizinkan nilai setelahnya dimiliki oleh class tersebut. 

    I.1) Syntax
    : static <nama method>/<nama property>

    I.2) Contoh
    : class Person {
        private static _age:number;
        
        static get age():number{
            return Person._age;
        }
      }
