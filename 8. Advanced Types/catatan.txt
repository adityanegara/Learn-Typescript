A) Type Aliases
    A.1) Permasalahan
    : Mengisikan type dari sebuah object tanpa menggunakan type
    Akan membuat kodingan kurang bagus. Bagaimana bila
    anda ingin membuat objek dengan type yang sama. Anda harus
    menuliskan typenya kembali.
     
    A.2) Solusi
    : Dengan menggunakan Type Aliases kita dapat mengelompokkan
    type dari sebuah object.

    A.3) Syntax
    : type <Nama Type> = {
        <nama property>: <Type Property>,
        ....
    }

    A.3) Contoh Inisialisasi
    : type Student = {
        readonly nim: number,
        name: string,
        dateOfBirth: Date,
    }

    A.4) Contoh Penggunaan
    const aditStudent = {
        nim: 165150200111021,
        name: Aditya Negara
        dateOfBirth: new Date();
    }

B) Union types
    : Bila ktia ingin suatu variable memiliki dua atau lebih
    opsi type maka gunakan union.

    B.1) Syntax
    : <nama variables> : <nama type 1> | <nama type 2> ...

    B.1) Contoh Penggunaan
    : const convertMilesToMeter = (miles: number | string): number =>{
        if(typeof miles === "string"){
             return parseInt(miles.match(/\d+/)[0]) * 1609.34
        }else{
            return miles  * 1609.34;
        }
    }

C) Intersection
    : Bila kita menginginkan suatu variable harus memiliki dua type

    C.1) Syntax
        : <nama variables> : <nama type 1> & <nama type 2> ...

    C.2) Contoh Penggunaan
        : type Move = {
            moveUp: () => void,
            moveDown: () => void,
            moveLeft: () => void,
            moveRight: () => void,
        };

        type Break = {
            break: () => void
        }


        let vehicle: Move & Break = {
            moveUp: () => console.log('move Up'),
            moveDown: () => console.log('move Down'),
            moveLeft: () => console.log('move Left'),
            moveRight: () => console.log('move Right'),
            break: () => console.log('break'),
        }

D) Literal
    : Bila kita menginginkan value dari suatu variable 
    hanya mengandung nilai tertentu. Contoh bila kita 
    ingin membuat variable memiliki nilai hanya A,B,C,D,
    dan F.

    D.1) Syntax
    <scope variables> <nama variables> : <literal types> = <value>

    D.2) Contoh
    const grades : 'A' | 'B' | 'C' | 'D' | 'F' = 'A';

F) Nullable
    : Secara default typescript tidak mengizinkan menggunakan
null atau undefined. Namun bila kita menginginkan sebuah variable
bernilai null maka dapat diberikan type 'null'

    F.1) Contoh
    const greetWithUppercase = (name: string | null):void =>{
        if(name){
            console.log(`Hello ${name.toUpperCase()}`)
        }else{
            console.log('Hello')
        }
    }

G) Optional Chaining
    : Ketika mengerjakan variable yang nullable. Kita harus
    melakukan null check. Yaitu mengecek apakah variable null atau tidak

    G.1) Contoh
    : type Customer = {
            birthday: Date
      };
        const getCustomer = (id: number): Customer | null => {
            return (id === 0) ? null : { birthday: new Date() };
        }
        let customer = getCustomer(0);
        if(customer){
            console.log(customer.birthday)
        }

    G.2) Permasalahan
        : Penulisan if(customer){console.log(customer.birthday)}
        terlalu panjang. 

    G.3) Solusi
        : Dapat disingkat dengan optional chaining
        menjadi console.log(customer?.birthday);

H) Nullish Coalscing Operator
    : Nilai nilai falsy ialah sebagai berikut
     (false, null, undefined, 0, '). Tapi bagaimana bila kita
     ingin 0 menjadi nilai yang valid?

     H.1) Contoh
     let speed: number | null = null;
     let ride = {
        speed: (speed !== null || speed !== undefined) ? speed : 30
     }

     H.2) Permasalahan
    : syntax  speed: (speed !== null || speed !== undefined) terlalu panjang 

      H.3) Solusi
      : speed ?? 30. Yang berarti bila nilai speed bukan null atau
      undefined maka isilah speed. Bila ya maka 30.

I) Type Assertions
    : Terkadang kita mengetahui type daripada typescript.

    I.1) Contoh 
    : let phone = document.getElementById('phone-input');

    Pada contoh diatas phone memiliki type HTMLElement atau
    null. Tetapi kita menginginkan phone merupakan 
    HTMLinputElement. maka dapat kita buat

    let phone = document.getElementById('phone-input') as HTMLInputElement;

J) Unknown types
    : Kita harus menghindari penggunaan type any dalam syntax typescript. Tetapi misalnya kita harus
    mengonversi kode javascript menjadi typescript dan ada situasi dimana kita harus menggunakan type any.

    J.1) Contoh
    const render = (document: any) =>{
        document.whatEverWeWant();
    }

    Pada function diatas ketika type dari document any. Kita dapt memanggil function apapun dalam
    document, meskipun function tersebut tidak ada.

    J.2) Solusi
    : Gunakanlah type unknown untuk memaksa kita menggunakan type checking dalam program kita

        const render = (document: unknown) =>{
            if(typeof document === 'string'){
                document.toUpperCase();
            }
           
        }

K) Never Type  
    : Misal kita memiliki function yang akan membuat syntax setelahnya tidak dieksekusi. Seperti infinite loop, atau
    throw error. Kita dapat menggunakan type never agar compiler mengetahui syntax dibawahnya tidak dijalankan

    K.1) Contoh
    const throwError = (message:string):never =>{
        throw new Error(message);
    } 