A) Apa itu decorators
    : decorator adalah attribut yang kita terapkan pada class. Dengan ini kita dapat mengubah
    perilaku class tersebut. 

    A.1) Mengizinkan decorators
    : pada file tsconfig.json ubah/uncomment
      "experimentalDecorators": true,

B) Class Decorators
    B.1) Syntax
    : function <nama function dengan pascal convention>(<parameter>: <type parameter>){
        ...
    }

    B.2) Contoh 
    :function Component(constructor: Function) {
        console.log('Component decorator called');
        constructor.prototype.uniqueId = Date.now();
        constructor.prototype.insertInDOM = () => {
            console.log('Inserting component in the DOM')
        }
    }

    B.3) Syntax Penggunaan
    : @<nama decorator>
        ....

    B.4) Contoh Penggunaan
    : @Component
        class ProfileComponent {

        }

C) Parameter pada decorator
    : Cara menambah parameter pada decorator ialah dengan membuat decorator factory. Decorator factory
    ialah decorator yang mengembalikan decorator.

    C.1) Syntax
    : function <nama decorator factory pascal naming>(<parameter>: <type parameter>){
        return (<parameter>: <type parameter>) =>{
            //code
        }
    }

    C.2) Contoh
    : function Component(options: string) {
        return (constructor: Function) => {
            console.log('Component decorator called');
            constructor.prototype.options = options;
            constructor.prototype.uniqueId = Date.now();
            constructor.prototype.insertInDOM = () => {
                console.log('Inserting component in the DOM')
            }
        }
    }

    C.3) Contoh Penggunaan
    : @Component({ selector: '#nav-button' })


D) Method Decorators
    D.1) Syntax
    : function <nama function decorator Pascal Naming>(
        <objek yang memiliki target method>: any,
        <nama dari target method>:string,
        <nama dari descriptior objek>: PropertyDescriptor
    ){
        //isi method
    }

    D.2) Contoh
    : function Log(target: any, methodName: string, descriptior: PropertyDescriptor){}

    D.3) Penggunaan
    : class <nama class>{
          @<nama function decorator>
      <function>

    }
      
    D.4) Contoh Penggunaan
    : class Person {
        @Log
        say(message: string) {
            console.log(`Person sasy ${message}`);
        }
    }

E) Accessor Decorator
    E.1) Syntax
    :  function <nama function decorator Pascal Naming>(
        <objek yang memiliki target method>: any,
        <nama dari target method>:string,
        <nama dari descriptior objek>: PropertyDescriptor
    ){
     //
    }

    E.2) Contoh 
    : function Capitalize(target: any, methodName: string, descriptor: PropertyDescriptor) {
        const original = descriptor.get;
        descriptor.get = function () {
            const result = original?.call(this);
            return (typeof result === 'string') ? result.toUpperCase() : result;
        }
    }

F) Property decorators
    : 
