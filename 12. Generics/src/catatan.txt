A) Generic Class
    A.1) Permasalahan
    : Misal anda ingin membuat class dimana constructornya memiliki type string atau number. Anda biasanya
    membuat typenya seperti ingin

        public id : string | number;

    Tetapi hal tersebut berakibat ketika membuat suatu objek kita harus melihat kembali classnya untuk
    mengetahui type dari class tersebut. Dan bagaimana bila kita menginginkan id mengizinkan boolean?
    maka kita harus mengubah typenya kembali

        public id : string | number | boolean;
    
    Dari permasalahan tersebut generic mengizinkan object untuk mendefinisikan type dari suatu propertynya sendiri

    A.2) Syntax
    class {nama class} <{nama generic}, ....> {
        constructor({nama parameter 1}: {generic}, ...)
    }

    A.3) Contoh
    class Employee<I>{
        constructor(public id: I, public name: string){}
    }

    A.4) Contoh penggunaan
    : const employee = new Employee<string>('123', 'adit');

B) Generic Function
    : Sama seperti classes. generic function mengizinkan pemanggil function dapat menentukan
    type dari parameter function tersebut.
    
    B.1) Syntax normal function
    : function {nama function}<nama generic, ....>({parameter}: {nama generic}, ....){
        ....
    }

    B.2) Syntax arrow function
    : const {nama function} = <nama generic, ....>({parameter}: {nama generic}, ....) =>{
        ....
    }

    B.3) Contoh Normal Function
    : function wrapInArray<T>(value: T) =>{
        return [value];
    }
    
    B.4) Contoh Arrow Function
    : const wrapInArray = <T>(value: T) => {
         return [value];
    }

    B.5) Contoh penggunaan
    : wrapInArray<string>('adit');
      wrapInArray<number>(1);

C) Generic Interfaces
    C.1) Syntax
    : interface {nama interface}<{nama generic}>{
        {nama property}: {type},
        ....
        }

    C.2) Contoh
    : interface Result<T>{
        data: T| null,
        error: string|null
    }

D) Generic Constraints
    : Anda dapat membatasi type yang masuk dalam generic

    D.1) Contoh
    : const echo = <T extends number|string>(value: T): T =>{
        return value;
    }

E) Extending Generic Classes
    E.1) Mengirim generic ke parent
        E.1.1) Syntax
        : class {nama class}<{nama generic}> extends {nama class parent}<nama generic>{
            ...
        }

        E.1.2) Contoh
        : class CompressibleStore<T> extends Store<T>{
            compress() { }
        }

    E.2) Membatasi generic 
        E.2.1) Syntax
        : class {nama class}<{nama generic} extends {type}> extends {nama class parent}<nama generic>{
            ...
        }

        E.2.2) Contoh
        : class SearchableStore<T extends { name: string }> extends Store<T>{
            find(name: string): T | undefined {
                return this._objects.find(obj => obj.name === name);
            }
        }

    E.3) Mendefinisikan generic
        E.3.1) Syntax
        : class {nama class} extends {nama class parent}<type>{
            ...
        }

        E.3.2) Contoh
        : class ProductStore extends Store<Product>{
            filterByCategory(category: string): Product[] {
                return []
            }
        }

F) Type Mapping
    F.1) Permasalahan
    : Terkadang kita harus membuat type yang didasari oleh type lainnya. Hal ini disebut type mapping.
    Misal kita ingin membuat type yang sama tetapi memiliki semua property readonly. Hal ini membuat
    code kita memiliki duplikasi.

    type User = {
        id: number;
        name: string;
    }

    type ReadOnlyUser  = {
        readonly id: number;
        readonly name: string;
    }

    F.2) Solusi
    : gunakanlah 'index signature','keyof', dan 'generic' untuk membuat type baru.

        type ReadOnly<T> = {
            [K in keyof T]: T[K]
        }
        

 